
	@GetMapping("/activate")
	@ResponseBody
	public ResponseEntity<String> activateAccountService(@RequestParam String token, @RequestParam String nickname) {
		Account account = repo.findByNickname(nickname);
		Date currentDate = new Date();

		if(account == null) {
			return ResponseEntity
				.badRequest()
				.body("Invalid token/account combination");
		}

		if(account.isEnabled()){
			return ResponseEntity
				.badRequest()
				.body("Account already active");
		}

		if(account.getValidationTokenExpiration().after(currentDate) || !account.getValidationToken().equals(token)) {
			return ResponseEntity
				.badRequest()
				.body("Invalid or expired token");
		}

		account.setValidationTokenExpiration(null);
		account.setValidationToken(null);
		account.setEnabled(true);

		repo.save(account);

		return ResponseEntity
			.ok()
			.body("Account activated");
	}

	@GetMapping("/recover")
	@ResponseBody
	public ResponseEntity<String> recoverPasswordService(@RequestParam String nickname){
		Account account = repo.findByNickname(nickname);

		if(account == null){
			return ResponseEntity
				.badRequest()
				.body("Invalid account");
		}

		//TODO send mail with new password?
		return null;
	}

/**
 * @author Seiferson (Cuauhtemoc Herrera)
 */
@RepositoryRestResource
public interface TaskRepository extends MongoRepository<Task, String>{

	@RestResource(path = "taskscompletedtoday")
	@PreAuthorize("@hashgen.md5gen(authentication.name) == #owner")
	public long countByOwnerAndDueDateBetweenAndCompletedTrue(
			@Param("owner") String owner,
			@Param("startdate") @DateTimeFormat(pattern = "MM-dd-yyyy/HH-mm") Date startDate,
			@Param("enddate") @DateTimeFormat(pattern = "MM-dd-yyyy/HH-mm") Date endDate
	);

	@RestResource(path = "todo")
	@PreAuthorize("@hashgen.md5gen(authentication.name) == #owner")
	public List<Task> findByOwnerAndCompletedFalseOrderByCreationDate(@Param("owner") String owner);

	/**
	@PostAuthorize("@hashgen.md5gen(authentication.name) == returnObject.get().owner")
	@Override
	public Optional<Task> findById(String id);**/
}


private static final Logger logger = LoggerFactory.getLogger(DataLoader.class);

private void financeLoader() throws Exception{
		financialrepo.deleteAll();
		recordrepo.deleteAll();
		
		Record r1 = new Record(HashGen.md5gen("seiferson"), 10000.00, "Bancomer savings account", Record.RecordType.ASSET_BANK_ACCOUNT, new Date(), null, null);
		recordrepo.insert(r1);
		
		Record r2 = new Record(HashGen.md5gen("seiferson"), 24000.00, "Gibson SG guitar", Record.RecordType.DEBT, new Date(), null, 12);
		
		Transaction t1 = new Transaction(HashGen.md5gen("seiferson"), 12.5, "Sears chocolates", Transaction.TransactionType.EXPENSE, new Date());
		Transaction t2 = new Transaction(HashGen.md5gen("seiferson"), 300.0, "Fuel", Transaction.TransactionType.EXPENSE, new Date());
		Transaction t3 = new Transaction(HashGen.md5gen("seiferson"), 130.0, "Uber", Transaction.TransactionType.EXPENSE, new Date());
		
		financialrepo.insert(t1);
		financialrepo.insert(t2);
		financialrepo.insert(t3);
	}




@Autowired
	private TaskRepository taskRepository;
	
	@Autowired
	private ScheduledTaskRepository scheduledTaskRepository;

	@Scheduled(fixedRate = 10000)
	public void watchDog() {
		ArrayList<Task> expiredTasks = taskRepository.findByExpirationDateLessThanAndExpiredFalseAndExpiresTrueAndCompletedFalse(new Date());
		for(Task expiredTask : expiredTasks){
			expiredTask.setExpired(true);
			taskRepository.save(expiredTask);
			logger.info("Expired task: " + expiredTask.getId());
		}
	}
	
	@Scheduled(cron="0 0 5 * * MON-FRI")
	public void weekDayTaskCreator(){
		ArrayList<ScheduledTask> scheduledTasks = new ArrayList<>(scheduledTaskRepository.findAll());
		for(ScheduledTask sTask : scheduledTasks) {
			Task t = new Task();
			t.setTitle(sTask.getTitle());
			t.setOwner(sTask.getOwner());
			t.setDescriptionRequired(true);
			t.setDescription(sTask.getDescription());
			t.setDueDate(new Date(new Date().getTime()+sTask.getDueTime()));
			t.setCompleted(false);
			t.setCreationDate(new Date());
			t.setExpires(true);
			t.setExpired(false);
			t.setExpirationDate(new Date(new Date().getTime()+sTask.getExpirationTime()));
			
			taskRepository.insert(t);
		}
	}


		
//		ScheduledTask st = new ScheduledTask();
//		st.setOwner("seiferson");
//		st.setTitle("AutoGeneratedTask");
//		st.setDescription("Please complete by EOD, this task was created using the scheduler and will expire in 12 hours");
//		st.setExpirationTime(12L*60L*60L*1000L);
//		st.setDueTime(9L*60L*60L*1000L);
//		
//		scheduledTaskRep.insert(st);
//		HashMap<String, String> map = new HashMap<>();
//		HashMap<String, Integer> keys = new HashMap<>();
//		int[] arr = {-1, 0, 1, 2, -1, -4};
//		int n = arr.length;
//		int[][] sumas = new int[arr.length][arr.length];
//		int[][] llaves = new int[(((n*(n-1)))/2)][2];
//		int cur = 0;
//		
//		int hits = 0;
//		
//		for(int i=0; i < arr.length; i++) {
//			for(int j=i+1; j < arr.length; j++) {
//				keys.put((i+"+"+j), arr[i]+arr[j]);
//				sumas[i][j] =  arr[i]+arr[j];
//				llaves[cur][0] = i;
//				llaves[cur++][1] = j;
//				hits++;
//			}
//		}
//		
//		System.out.println(keys.size());
//		System.out.println(cur-1);
//		
//		Iterator it = keys.entrySet().iterator();
//		for(int i=0; i < arr.length; i++) {
//			for(int j=0;j<cur;j++) {
//				int[] sol = new int[3];
//				sol[0] = arr[llaves[j][0]];
//				sol[1] = arr[llaves[j][1]];
//				sol[2] = arr[i];
//				
//				if(llaves[j][0]!=i && llaves[j][1]!=i && sumas[llaves[j][0]][llaves[j][1]] +arr[i] == 0) {
//					Arrays.sort(sol);
//					if(!map.containsKey(Arrays.toString(sol))) {
//						System.out.println(Arrays.toString(sol));
//						map.put(Arrays.toString(sol), Arrays.toString(sol));
//					}
//				}
//				hits++;
//			}
////			while(it.hasNext()) {
//				Map.Entry pair = (Map.Entry)it.next();
//				int x = Integer.parseInt((((String)pair.getKey()).split("\\+"))[0]);
//				int y = Integer.parseInt((((String)pair.getKey()).split("\\+"))[1]);
//				int[] sol = new int[3];
//				sol[0] = arr[x];
//				sol[1] = arr[y];
//				sol[2] = arr[i];
//				
//				if(x!=i && y!=i && ((Integer)pair.getValue())+arr[i] == 0) {
//					Arrays.sort(sol);
//					if(!map.containsKey(Arrays.toString(sol))) {
//						System.out.println(Arrays.toString(sol));
//						map.put(Arrays.toString(sol), Arrays.toString(sol));
//					}
//				}
//				hits++;
//			}
//		}
		
//		System.out.println(hits);
		
//		int[][] map = new int[80][80];
//		
//		//0 will identify water
// 		for(int i = 0; i < 80; i++) {
//			for(int j = 0; j < 80; j++) {
//				map[i][j] = 0;
//			}
//		}
// 		
// 		Random r = new Random();
// 		ArrayList<Location> land = new ArrayList<Location>();
// 		
// 		
// 		for(int i = 0; i< 50; i++) {
// 			int inix = r.nextInt(60)+10;
// 	 		int iniy = r.nextInt(60)+10;
// 			map[inix][iniy] = 1;
// 			
// 			Location l = new Location();
// 	 		l.x = inix;
// 	 		l.y = iniy;
// 	 		land.add(l);
// 	 		
// 		}
// 		for(Location l:land) {
// 			checkLand(map, getNext(l));
// 		}
// 		
// 		for(int i = 0; i < 3000; i++) {
// 			boolean changeinc = true;
// 			while(changeinc) {
// 				//Get a random piece of land from array
// 				Location xm = land.get(r.nextInt(land.size()));
// 				
// 				ArrayList<Location> sur = getNextCross(xm);
// 				
// 				for(Location xmm : sur) {
// 					if(map[xmm.x][xmm.y] == 2) {
// 						map[xmm.x][xmm.y] = 1;
// 						checkLand(map, getNext(xmm));
// 						land.add(xmm);
// 						changeinc = false;
// 						break;
// 					}
// 				}	
// 			}
// 		}
 		//printMap(map);
 		
 		
 		
		
		
//		ArrayList<Equipment> eq = new ArrayList<>();
//		
//		Equipment a = equipRep.findOne("5ac3da6243bfa53ef83f103b");
//		eq.add(a);
//		
//		Space s = spaceRep.findOne("5ac3da6243bfa53ef83f1037");
//		
//		Player p = new Player();
//		p.setName("Test warrior");
//		p.setDexterity(1);
//		p.setAgility(1);
//		p.setLuck(1);
//		p.setMagic(1);
//		p.setStrength(1);
//		p.setVitality(1);
//		
//		p.setEquipment(eq);
//		
//		p.setLevel(1);
//		p.setExperience(0);
//		p.setGoldCoins(0);
//		
//		p.setMainElement(Element.NEUTRAL);
//		p.setSubElement(Element.NATURE);
//		
//		p.setX(0);
//		p.setY(0);
//		p.setZ(0);
//		p.setSpace(s);
//		
//		p.setCurrentHitPoints(StatsEngine.calculateMaxHitPoints(p));
//		p.setCurrentSkillPoints(StatsEngine.calculateMaxSkillPoints(p));
//		
//		pRep.insert(p);
		
		
		/**Space s = new Space();
		
		s.setName("field_1_map_1");
		s.setLimitx(300);
		s.setLimity(300);
		
		spaceRep.insert(s);
		
		Equipment a = new Equipment();
		a.setName("leather_boots");
		a.setType(EquipmentType.SHOES);
		a.setWeight(1.2);
		a.setBonus(1);
		equipRep.insert(a);
		
		a = new Equipment();
		a.setName("light_armor");
		a.setType(EquipmentType.ARMOR);
		a.setWeight(6);
		a.setBonus(1);
		equipRep.insert(a);
		
		a = new Equipment();
		a.setName("leather_gloves");
		a.setType(EquipmentType.GLOVES);
		a.setWeight(0.3);
		a.setBonus(1);
		equipRep.insert(a);
		
		a = new Equipment();
		a.setName("fabric_cloak");
		a.setType(EquipmentType.GARMENT);
		a.setWeight(0.4);
		a.setBonus(1);
		equipRep.insert(a);
		
		
		a = new Equipment();
		a.setName("silver_ring");
		a.setType(EquipmentType.RING);
		a.setWeight(0.01);
		a.setBonus(0);
		equipRep.insert(a);
		
		a = new Equipment();
		a.setName("silver_necklace");
		a.setType(EquipmentType.NECKLACE);
		a.setWeight(0.03);
		a.setBonus(0);
		equipRep.insert(a);
		
		/**
		repository.deleteAll();
		taskRepository.deleteAll();
		
		ArrayList<String> authorities = new ArrayList<String>();
		authorities.add("USER");
		Account account = new Account();
		account.setNickname("seiferson");
		account.setEmail("seifer.ch@gmail.com");
		account.setEnabled(true);
		account.setPassword("testpasswd");
		account.setAuthorities(authorities);
		
		repository.insert(account);
		
		
		Task t = new Task();
		t.setActive(true);
		t.setCompleted(false);
		t.setCompletionDate(null);
		t.setCreationDate(null);
		t.setCreationDate(new Date());
		t.setDescription("Take care of the dirty dishes, is not good for health to keep them with food more than one day, also it stinks.");
		t.setDescriptionRequired(true);
		t.setDueDate(new Date(new Date().getTime() + 3*24*60*60*1000) );
		t.setExpirationDate(null);
		t.setExpires(false);
		t.setOwner("seiferson");
		t.setTitle("Wash the dishes");
		
		taskRepository.insert(t);
		**/


public  class Location{
		public int x;
		public int y;
	}
	
	
	public ArrayList<Location> getNext(Location l){
		
	
		
		
		
		ArrayList<Location> ll = new ArrayList<>();
		
		Location n = new Location();
		if( l.x - 1 >= 0 ) {
			n.x = l.x - 1;
			n.y = l.y;
		}
		ll.add(n);
		
		n = new Location();
		if( l.y - 1 >= 0 ) {
			n.x = l.x;
			n.y = l.y - 1;
		}
		ll.add(n);
		
		n = new Location();
		if( l.x + 1 < 80 ) {
			n.x = l.x + 1;
			n.y = l.y;
		}
		ll.add(n);
		
		n = new Location();
		if( l.y + 1 < 80 ) {
			n.x = l.x;
			n.y = l.y + 1;
		}
		ll.add(n);
		
		n = new Location();
		if( l.x - 1 >= 0 && l.y - 1 >= 0 ) {
			n.x = l.x - 1;
			n.y = l.y - 1;
		}
		ll.add(n);
		
		
		n = new Location();
		if( l.x - 1 >= 0 && l.y + 1 < 80 ) {
			n.x = l.x - 1;
			n.y = l.y + 1;
		}
		ll.add(n);
		
		n = new Location();
		if( l.x + 1 < 80  && l.y - 1 >= 0) {
			n.x = l.x + 1;
			n.y = l.y - 1;
		}
		ll.add(n);
		
		n = new Location();
		if( l.x + 1 < 80 && l.y + 1 < 80 ) {
			n.x = l.x + 1;
			n.y = l.y + 1;
		}
		ll.add(n);
		
		return ll;
	}
	
	public ArrayList<Location> getNextCross(Location l){
		ArrayList<Location> ll = new ArrayList<>();
		
		Location n = new Location();
		if( l.x - 1 >= 0 ) {
			n.x = l.x - 1;
			n.y = l.y;
		}
		ll.add(n);
		
		n = new Location();
		if( l.y - 1 >= 0 ) {
			n.x = l.x;
			n.y = l.y - 1;
		}
		ll.add(n);
		
		n = new Location();
		if( l.x + 1 < 80 ) {
			n.x = l.x + 1;
			n.y = l.y;
		}
		ll.add(n);
		
		n = new Location();
		if( l.y + 1 < 80 ) {
			n.x = l.x;
			n.y = l.y + 1;
		}
		ll.add(n);
		
		return ll;
	}
	
	public void printMap( int[][] map ) {
		for(int i  = 0; i < 80; i++) {
			System.out.println();
			for(int j = 0 ; j < 80; j++) {
				if(map[i][j] == 0)
				System.out.print(". ");
				else if(map[i][j] == 1) 
				System.out.print("# ");
				else
				System.out.print("~ ");
			}
		}
	}
	
	public void checkLand(int[][] map, ArrayList<Location> pos) {
		for(Location l : pos) {
			if(map[l.x][l.y]==0) {
				map[l.x][l.y] = 2;
			}
		}
	}


public void takeDamage(Damage damage){
		int finalDamage = damage.getAmount();
		
		if(Dice.rollDice(20) == Dice.rollDice(20)){
			finalDamage = (int) Math.round(damage.getCriticalRate() * damage.getAmount());
			System.out.println("Crit");
		}
		
		if(currentHitPoints - finalDamage < 0){
			currentHitPoints = 0;
			System.out.println("GameOver");
		} else {
			currentHitPoints -= finalDamage;
		}
	}
	
	public Damage performBasicAttack(){
		int damageAmount = level * 5 + strength * 10 + ATK_BASE;
		return new Damage(DamageType.PHYSICAL, damageAmount, element, criticalRate);
	}
	
	public int getMaxHitPoints(){
		return (HP_BASE+level*20);
	}
	
	public int getCurrentHitPoints(){
		return this.currentHitPoints;
	}
	
	public int getCurrentSkillPoints(){
		return currentSkillPoints;
	}
	
	public String getName(){
		return name;
	}
	
	public String getId(){
		return id;
	}
	
	public void setName(String name){
		this.name = name;
	}
	
	public void setId(String id){
		this.id = id;
	}

<plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <version>1.6</version>
        <executions>
          <execution>
            <id>install node and npm</id>
            <goals>
              <goal>install-node-and-npm</goal>
            </goals>
            <configuration>
              <nodeVersion>v12.16.0</nodeVersion>
              <npmVersion>6.13.7</npmVersion>
            </configuration>
          </execution>
          <execution>
            <id>npm install</id>
            <goals>
              <goal>npm</goal>
            </goals>
            <configuration>
              <arguments>install</arguments>
            </configuration>
          </execution>
          <execution>
            <id>npm run build</id>
            <goals>
              <goal>npm</goal>
            </goals>
            <configuration>
              <arguments>run build</arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>